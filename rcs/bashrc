# ==============================================================================
# Return if not running interactively
# ==============================================================================
case $- in
    *i*) ;;
    *) return;;
esac

# ==============================================================================
# Define color variables
# ==============================================================================
# Reset
Color_Off='\x1B[0m'       # Text Reset
NC="\x1B[m"               # Color Reset
# Regular Colors
Black='\x1B[0;30m'        # Black
Red='\x1B[0;31m'          # Red
Green='\x1B[0;32m'        # Green
Yellow='\x1B[0;33m'       # Yellow
Blue='\x1B[0;34m'         # Blue
Purple='\x1B[0;35m'       # Purple
Cyan='\x1B[0;36m'         # Cyan
White='\x1B[0;37m'        # White
# Bold
BBlack='\x1B[1;30m'       # Black
BRed='\x1B[1;31m'         # Red
BGreen='\x1B[1;32m'       # Green
BYellow='\x1B[1;33m'      # Yellow
BBlue='\x1B[1;34m'        # Blue
BPurple='\x1B[1;35m'      # Purple
BCyan='\x1B[1;36m'        # Cyan
BWhite='\x1B[1;37m'       # White
# Underline
UBlack='\x1B[4;30m'       # Black
URed='\x1B[4;31m'         # Red
UGreen='\x1B[4;32m'       # Green
UYellow='\x1B[4;33m'      # Yellow
UBlue='\x1B[4;34m'        # Blue
UPurple='\x1B[4;35m'      # Purple
UCyan='\x1B[4;36m'        # Cyan
UWhite='\x1B[4;37m'       # White
# High Intensity
IBlack='\x1B[0;90m'       # Black
IRed='\x1B[0;91m'         # Red
IGreen='\x1B[0;92m'       # Green
IYellow='\x1B[0;93m'      # Yellow
IBlue='\x1B[0;94m'        # Blue
IPurple='\x1B[0;95m'      # Purple
ICyan='\x1B[0;96m'        # Cyan
IWhite='\x1B[0;97m'       # White
# Bold High Intensity
BIBlack='\x1B[1;90m'      # Black
BIRed='\x1B[1;91m'        # Red
BIGreen='\x1B[1;92m'      # Green
BIYellow='\x1B[1;93m'     # Yellow
BIBlue='\x1B[1;94m'       # Blue
BIPurple='\x1B[1;95m'     # Purple
BICyan='\x1B[1;96m'       # Cyan
BIWhite='\x1B[1;97m'      # White
# Background
On_Black='\x1B[40m'       # Black
On_Red='\x1B[41m'         # Red
On_Green='\x1B[42m'       # Green
On_Yellow='\x1B[43m'      # Yellow
On_Blue='\x1B[44m'        # Blue
On_Purple='\x1B[45m'      # Purple
On_Cyan='\x1B[46m'        # Cyan
On_White='\x1B[47m'       # White
# High Intensity backgrounds
On_IBlack='\x1B[0;100m'   # Black
On_IRed='\x1B[0;101m'     # Red
On_IGreen='\x1B[0;102m'   # Green
On_IYellow='\x1B[0;103m'  # Yellow
On_IBlue='\x1B[0;104m'    # Blue
On_IPurple='\x1B[0;105m'  # Purple
On_ICyan='\x1B[0;106m'    # Cyan
On_IWhite='\x1B[0;107m'   # White

# ==============================================================================
# Greet
# ==============================================================================
screen -ls

# ==============================================================================
# Don't put duplicate lines or lines starting with space in the history
# ==============================================================================
HISTCONTROL=ignoreboth

# ==============================================================================
# Append to the history file instead of overwriting it
# ==============================================================================
shopt -s histappend

# ==============================================================================
# Set history length
# ==============================================================================
HISTSIZE=1000
HISTFILESIZE=2000

# ==============================================================================
# Check the window size after each command and, if necessary, update the values
# of LINES and COLUMNS
# ==============================================================================
shopt -s checkwinsize

# ==============================================================================
# Make less more friendly for non-text input files
# ==============================================================================
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# ==============================================================================
# Enable color support of ls and also add handy aliases
# ==============================================================================
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -Fh --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
else
    alias ls='ls -FhG'
fi

# ==============================================================================
# Enable colored GCC warnings and errors
# ==============================================================================
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# ==============================================================================
# Enable programmable completion features
# ==============================================================================
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# ==============================================================================
# Aliases and functions
# ==============================================================================
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias ll='ls -Fhl'
# Show hidden files
alias la='ls -Fhla'
# Sort by extension
alias lx='ls -FhlXB'
# Sort by size
alias lz='ls -FhlSr'
# Sort by data
alias lt='ls -Fhltr'
# Sort by change time
alias lc='ls -Fhltcr'
# Sort by usage time
alias lu='ls -Fhltur'

alias rm='rm -i'

alias rsync='rsync --verbose --recursive --links --perms --times --delete --delete-excluded --human-readable --progress --exclude=*.DS_Store* --exclude=*.ipynb_checkpoints* --exclude=*._*'

alias cp='cp -i'

alias mv='mv -i'

alias mkdir='mkdir -vp'

alias du='du -hs'

alias vi=vim

alias sa='source activate'
alias sd='source deactivate'

function sshport(){
    ssh -N -f -L localhost:$3:localhost:$2 $1
}

alias pippublish="rm -rf build/ *.egg-info dist; python setup.py sdist; python setup.py bdist_wheel; twine upload dist/*"

# ==============================================================================
# Sanitize
# ==============================================================================
alias chmodall="find . -not -path '*/.*' -type f -exec chmod 644 {} \; && find . -not -path '*/.*' -type d -exec chmod 755 {} \;"
alias chownu="sudo chown -vR $USER ."
alias rmpyc="find . | grep -E '(__pycache__|\.pyc$)' | xargs rm -rf"
alias rmdsstore="find . -name .DS_Store -delete"


# ==============================================================================
# Compress
# ==============================================================================
function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bzip2 -dk $1    ;;
            *.rar)       unrar x $1      ;;
            *.bz2)       bzip2 -dk $1    ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }


# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# ==============================================================================
# Git
# ==============================================================================
alias gitcache="git config --global credential.helper cache; git config --global credential.helper 'cache --timeout=36000'"


function gitsync()
{
    for d in *
    do
        if [ -d $d ]; then
            printf '\n\n\n\n\n\n\n\n'

            printf $Purple
            printf '================================================================================'
            printf '\n'
            printf $Blue
            printf $d
            printf $Purple
            printf '\n'
            printf 'vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'
            printf '\n'
            printf $NC

            cd $d

            printf $Yellow
            printf 'git status'
            printf '\n'
            printf $NC
            git status

            printf $Cyan
            printf "git submodule foreach 'git stash'"
            printf '\n'
            printf $NC
            git submodule foreach 'git stash'

            printf $Yellow
            printf "git submodule foreach 'git reset --hard'"
            printf '\n'
            printf $NC
            git submodule foreach 'git reset --hard'

            printf $Cyan
            printf "git submodule foreach 'git clean -fd'"
            printf '\n'
            printf $NC
            git submodule foreach 'git clean -fd'

            printf $Yellow
            printf 'git submodule update --init --remote --recursive'
            printf '\n'
            printf $NC
            git submodule update --init --remote --recursive

            printf $Cyan
            printf 'git diff --submodule'
            printf '\n'
            printf $NC
            git diff --submodule

            printf $Yellow
            printf 'git add -A'
            printf '\n'
            printf $NC
            git add -A

            printf $Cyan printf 'git commit -m $1'
            printf '\n'
            printf $NC
            git commit -m "$1"

            printf $Yellow
            printf 'git pull'
            printf '\n'
            printf $NC
            git pull

            printf $Cyan
            printf 'git push'
            printf '\n'
            printf $NC
            git push

            cd ..

            printf $Purple
            printf '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'
            printf '\n'
            printf '================================================================================'
            printf '\n'
            printf $NC
        fi
    done
}


function gittrunc()
{
    git checkout --orphan temp $1
    git commit -m 'Truncated history'
    git rebase --onto temp $1 master
    git checkout master
    git branch -D temp
}


function gitclonekwatme ()
{
    git clone --recursive https://github.com/kwatme/classification;
    git clone --recursive https://github.com/kwatme/cluster;
    git clone --recursive https://github.com/kwatme/cryptograph;
    git clone --recursive https://github.com/kwatme/dimension_reduction;
    git clone --recursive https://github.com/kwatme/environment;
    git clone --recursive https://github.com/kwatme/feature;
    git clone --recursive https://github.com/kwatme/file;
    git clone --recursive https://github.com/kwatme/grch;
    git clone --recursive https://github.com/kwatme/gsea;
    git clone --recursive https://github.com/kwatme/hdf5;
    git clone --recursive https://github.com/kwatme/information;
    git clone --recursive https://github.com/kwatme/jupyter_gui;
    git clone --recursive https://github.com/kwatme/kernel_density;
    git clone --recursive https://github.com/kwatme/kwatme.com;
    git clone --recursive https://github.com/kwatme/linear_algebra;
    git clone --recursive https://github.com/kwatme/linear_model;
    git clone --recursive https://github.com/kwatme/match;
    git clone --recursive https://github.com/kwatme/matrix_decomposition;
    git clone --recursive https://github.com/kwatme/mutational_signature;
    git clone --recursive https://github.com/kwatme/nd_array;
    git clone --recursive https://github.com/kwatme/network;
    git clone --recursive https://github.com/kwatme/onco_gps;
    git clone --recursive https://github.com/kwatme/plot;
    git clone --recursive https://github.com/kwatme/probability;
    git clone --recursive https://github.com/kwatme/regression;
    git clone --recursive https://github.com/kwatme/sequence;
    git clone --recursive https://github.com/kwatme/sequencing_process;
    git clone --recursive https://github.com/kwatme/skew;
    git clone --recursive https://github.com/kwatme/spro;
    git clone --recursive https://github.com/kwatme/support;
    git clone --recursive https://github.com/kwatme/tcga;
    git clone --recursive https://github.com/kwatme/variant;
    git clone --recursive https://github.com/ucsd-ccal/ccal;
}

function gitcloneguardiome()
{
    git clone --recursive https://github.com/guardiome/code_genome_app;
    git clone --recursive https://github.com/guardiome/g2p;
    git clone --recursive https://github.com/guardiome/genome;
    git clone --recursive https://github.com/guardiome/genome_ai;
    git clone --recursive https://github.com/guardiome/genome_ai_server;
    git clone --recursive https://github.com/guardiome/genome_ai_ui;
    git clone --recursive https://github.com/guardiome/genome_app;
    git clone --recursive https://github.com/guardiome/genomeapps.io;
    git clone --recursive https://github.com/guardiome/pipeline;
    git clone --recursive https://github.com/guardiome/simple_genome_app;
}

# ==============================================================================
# Style shell prompt
# ==============================================================================
PS1='(\h) [ \w ] > '

# ==============================================================================
# Set paths
# ==============================================================================
export PATH="$HOME/Jumis/tools/conda/bin:$PATH"
alias spro="python $HOME/Jumis/tools/repositories/spro/spro.py"
